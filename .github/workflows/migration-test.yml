name: Tests

on:
  push:

jobs:
  tests:
    runs-on: ubuntu-latest
 
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: vultisig-verifier
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Download go-wrappers
        run: |
          git clone https://github.com/vultisig/go-wrappers.git ../go-wrappers

      - name: Install hurl
        uses: gacts/install-hurl@v1.2.1

      - name: Create test config
        run: |
          cat > config.json <<EOF
          {
            "server": {
              "host": "localhost",
              "port": 8080,
              "jwt_secret": "test-secret"
            },
            "redis": {
              "host": "localhost",
              "port": "6379"
            },
            "block_storage": {
              "host": "http://localhost:9000",
              "region": "us-east-1",
              "access_key": "minioadmin",
              "secret": "minioadmin",
              "bucket": "vultisig-verifier"
            },
            "database": {
              "dsn": "postgres://myuser:mypassword@localhost:5432/vultisig-verifier?sslmode=disable"
            },
            "plugin": {},
            "datadog": {
              "host": "localhost",
              "port": "8125"
            }
          }
          EOF

      - name: Build verifier binary
        run: |
          export LD_LIBRARY_PATH=../go-wrappers/includes/linux/:$LD_LIBRARY_PATH
          go build -o verifier cmd/verifier/main.go

      - name: Start verifier
        run: |
          export LD_LIBRARY_PATH=../go-wrappers/includes/linux/:$LD_LIBRARY_PATH
          export VS_CONFIG_NAME=config

          # Start verifier in background
          ./verifier &
          VERIFIER_PID=$!

          # Give it time to run migrations
          sleep 10

          # Check if process is still running
          if ! kill -0 $VERIFIER_PID 2>/dev/null; then
            echo "Verifier process failed to start"
            exit 1
          fi

          # Check if migrations ran successfully by verifying tables exist
          PGPASSWORD=mypassword psql -h localhost -U myuser -d vultisig-verifier -c "\dt" | grep -E "(plugin_policy|pricings|plugins|tags|reviews|vault_tokens) | wc -l" > /dev/null
          if [ $? -ne 0 ]; then
            echo "Migrations did not run successfully - expected tables not found"
            kill $VERIFIER_PID
            exit 1
          fi

          echo "All migrations ran successfully!"

          # Save PID for later cleanup
          echo $VERIFIER_PID > verifier.pid

      - name: Check migration integrity
        run: |
          # Verify goose migrations table exists and has entries
          PGPASSWORD=mypassword psql -h localhost -U myuser -d vultisig-verifier -c "SELECT COUNT(*) FROM goose_db_version;" | grep -E "[0-9]+" > /dev/null
          if [ $? -ne 0 ]; then
            echo "Goose migrations table not found or empty"
            exit 1
          fi

          echo "Migration integrity check passed!"

      - name: Check schema updates
        run: |
          # Dump current schema
          PGPASSWORD=mypassword pg_dump -h localhost -U myuser -d vultisig-verifier \
            --schema-only \
            --no-comments \
            --no-owner \
            --quote-all-identifiers \
            -T public.goose_db_version \
            -T public.goose_db_version_id_seq | sed \
            -e '/^--.*/d' \
            -e '/^SET /d' \
            -e '/^SELECT pg_catalog./d' \
            -e 's/"public"\.//' | awk '/./ { e=0 } /^$$/ { e += 1 } e <= 1' \
            > ./current_schema.sql

          # Compare with repository schema
          if ! diff -u ./internal/storage/postgres/schema/schema.sql ./current_schema.sql; then
            echo "Schema has changed but schema.sql was not updated!"
            echo "Please run 'make dump-schema' to update the schema file."
            exit 1
          fi

          echo "Schema is up to date!"

      - name: Run smoke test
        run: |
          hurl --test ./testdata/smoke/public.hurl

      - name: Cleanup verifier
        run: |
          if [ -f verifier.pid ]; then
            VERIFIER_PID=$(cat verifier.pid)
            if kill -0 $VERIFIER_PID 2>/dev/null; then
              kill $VERIFIER_PID
            fi
            rm verifier.pid
          fi
